/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vending_machine_TYPES_H
#define vending_machine_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace vending_machine {

struct ErrorCode {
  enum type {
    SE_CONNPOOL_TIMEOUT = 0,
    SE_THRIFT_CONN_ERROR = 1,
    SE_UNAUTHORIZED = 2,
    SE_MEMCACHED_ERROR = 3,
    SE_MONGODB_ERROR = 4,
    SE_REDIS_ERROR = 5,
    SE_THRIFT_HANDLER_ERROR = 6,
    SE_RABBITMQ_CONN_ERROR = 7
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct WeatherType {
  enum type {
    WARM = 0,
    COLD = 1
  };
};

extern const std::map<int, const char*> _WeatherType_VALUES_TO_NAMES;

struct BeverageType {
  enum type {
    HOT = 0,
    COLD = 1
  };
};

extern const std::map<int, const char*> _BeverageType_VALUES_TO_NAMES;

typedef struct _ServiceException__isset {
  _ServiceException__isset() : errorCode(false), message(false) {}
  bool errorCode;
  bool message;
} _ServiceException__isset;

class ServiceException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  ServiceException() : errorCode((ErrorCode::type)0), message() {
  }

  virtual ~ServiceException() throw() {}

  ErrorCode::type errorCode;
  std::string message;

  _ServiceException__isset __isset;

  void __set_errorCode(const ErrorCode::type val) {
    errorCode = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const ServiceException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const ServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceException &a, ServiceException &b);

typedef struct _location__isset {
  _location__isset() : location_id(false), city(false) {}
  bool location_id;
  bool city;
} _location__isset;

class location {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  location() : location_id(0), city(0) {
  }

  virtual ~location() throw() {}

  int64_t location_id;
  int64_t city;

  _location__isset __isset;

  void __set_location_id(const int64_t val) {
    location_id = val;
  }

  void __set_city(const int64_t val) {
    city = val;
  }

  bool operator == (const location & rhs) const
  {
    if (!(location_id == rhs.location_id))
      return false;
    if (!(city == rhs.city))
      return false;
    return true;
  }
  bool operator != (const location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(location &a, location &b);

} // namespace

#endif
